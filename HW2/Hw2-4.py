# -*- coding: utf-8 -*-
"""HW2-4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hy4yfF56DXHXh3UUG5elhfUhoCvM4FJP

### **Problem Description**
Please modify the learning algorithm code in the class and report the bias and variance.
"""

import matplotlib.pyplot as plt
import typing
import numpy as np
from scipy import stats


def gen_sindata(n=2):
    x = stats.uniform(-1, 2)  # define random variable
    v = x.rvs((n, 1))  # generate sample
    y = np.sin(np.pi*v)  # use sample for sine
    return (v, y)


dataCount = 100
X, y = gen_sindata(dataCount)
y_value = sum(y)/dataCount
y_pred = np.full((50), y_value)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
xi = np.linspace(-1, 1, 50)
yi = np.sin(np.pi*xi)

plt.plot(xi, yi, '--k', label='target')
plt.plot(X, y, 'o')
plt.plot(xi, y_pred, c='k', label='best fit')
plt.legend(loc='best')
plt.title('$a=%3.3g$' % (y_pred[0]), fontsize=16)
plt.show()

# modify output function to compute bias and variation


def output() -> typing.Tuple[float, float]:
    cnt = 100000
    a_out = []  # output container

    for i in range(cnt):
        X, y = gen_sindata(dataCount)
        y_value = sum(y)/dataCount
        y_pred = np.full((50), y_value)
        a_out.append(y_pred)
    a_bar = np.mean(a_out)  # approx 1.43
    a_var = np.var(a_out)  # approx 0.71
    bias = 0
    var = 0
    x = np.random.uniform(-1, 2, size=cnt)
    for i in range(cnt):
        bias += (a_bar*x[i] - np.sin(np.pi*x[i]))**2
        var += a_var * x[i] * x[i]
    bias = bias / cnt  # approx 2.84
    var = var / cnt  # approx 0.71
    return (bias, var)

bias, var = output()

print(bias)
print(var)
